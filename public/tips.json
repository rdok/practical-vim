[
    {
        "title": "1 Meet the Dot Command",
        "description": "The dot command lets us repeat the last change. It is the most powerful and versatile command in Vim.<br/><a target='_blank' href='https://vimhelp.org/repeat.txt.html#'>Repeat</a>"
    },
    {
        "title": "2 Don't Repeat Yourself",
        "description": "For such a common use case as appending a semicolon at the end of a series of lines, Vim provides a dedicated command that combines two steps into one."
    },
    {
        "title": "3 Take One Step Back, Then Three Forward",
        "description": "We can pad a single character with two spaces (one if front, the other behind) by using an idiomatic Vim solution. At first it might look slightly odd, but the solution has the benefit of being repeatable, which allows us to complete the task effortlessly."
    },
    {
        "title": "4 Act, Repeat, Reverse",
        "description": "When facing a repetitive task, we can achieve an optimal editing strategy by making both the motion and the change repeatable. Vim has a knack for this. It remembers our actions and keeps the most common ones within close reach so that we can easily replay them."
    },
    {
        "title": "5 Find and Replace by Hand",
        "description": "Vim has a :substitute command for find-and-replace tasks, but with this alternative technique, we'll change the first occurence by hand and then find and replace every other match one by one. The dot command will save us from labor, but we'll meet another nifty one-key command that makes jumpting bwetween matches a snap."
    },
    {
        "title": "6 Meet the Dot Formula",
        "description": "We've considered three simple editing tasks so far. Even though each problem was different, we found a solution using the dot command for each one. In this tip, we'll compare each solution and identify a common pattern-an optimal editing strategy that I call the Dot Formula."
    },
    {
        "title": "7 Pause with Your Brush Off the Page",
        "description": "For those unused to Vim, Normal mode can seem like an odd default. But experienced Vim users have difficulty imagining it any other way. This tip uses an analogy to illustrate the Vim way."

    },
    {
        "title": "8 Chunk Your Undos",
        "description": "In other text editors, invoking the undo command after typing a few words might revert the last typed word or character. However, in Vim we can control the granularity of the undo command."
    },
    {
        "title": "9 Compose Repeatable Changes",
        "description": "Vim is optimized for repetition. In order to exploit this, we have to be mindful of how we compose our changes.",
        "code": "Delete a word: daw"
    },
    {
        "title": "10 Use Counts to Do Simple Arithmetic",
        "description": "Most Normal mode commands can be executed with a count. We can exploit this feature to do simple arithmetic.<br/><a href='https://vimhelp.org/intro.txt.html#count' target='_blank'>Count</a>, <a href='https://vimhelp.org/change.txt.html#CTRL-A' target='_blank'>Add Count</a>"
    },
    {
        "title": "11 Don't Count If You Can Repeat",
        "description": "We can minimize the keystrokes required to perform certain tasks by providing a count, but that doesn't mean that we should. Consider the pros and cons of counting versus repeating."
    },
    {
        "title": "12 Combine and Conquer",
        "description": "Much of Vim's power stems from the way that operators and motions can be combined.<br/><a href='https://vimhelp.org/motion.txt.html#operator' target='_blank'>Motions and Operators</a><br/><code>zf</code>"
    },
    {
        "title": "13 Make Corrections Instantly from Insert Mode",
        "description": "If we make a mistake while composing text in Insert mode, we can fix it immediately. There's no need to change modes. Besides the backspace key, we can use a couple of other Insert mode commands to make corrections. <br/><code>&#60;C-w&#62;</code>"
    },
    {
        "title": "14 Get Back to Normal Mode",
        "description": "Insert mode is specialized for one task--entering text--whereas Normal mode is where we spend most of our time (as the name suggests). So it's important to be able to switch quickly between them. <br/><i>Insert Normal Mode: </i><code>&#60;C-o&#62;"
    },
    {
        "title": "15 Paste from a Register Without Leaving Insert Mode",
        "description": "Vim's yank and put operations are usually executed from Normal mode, but sometimes we might want to paste text into the document without leaving insert mode. <br/><code>yt,</code> + <code>&#60;C-r&#62;0</code>"
    },
    {
        "title": "16 Do Back-of-the-Envelope Calculations in Place",
        "description": "The expression register allows us to perform calculations and then insert the result directly into our document. In this tip, we'll see one application for this powerful feature. <br/><code>&#60;C-r&#62;=</code>"
    },
    {
        "title": "17 Insert Unusual Characters by Character Code",
        "description": "Vim can insert any character by its numeric code. This can be handy for entering symbols that are not found on the keyboard.<br/><code>&#60;C-v&#62;200</code>"
    },
    {
        "title": "18 Insert Unusual Characters by Digraph",
        "description": "While Vim allows us to insert any character by its numeric code, these can be hard to remember and awkward to type. We can also insert unusual characters as diagraphs: pairs of characters that are easy to remember."
    },
    {
        "title": "19 Overwrite Existing Text with Replace Mode",
        "description": "Replace mode is identical to Insert Mode, except that it overwrites existing text in the document.<br/><code>R</code>, <code>gR</code>"
    },
    {
        "title": "20 Grok Visual Mode",
        "description": "Visual mode allows us to select a range of text and then operate upon it. However intuitive this might seem, Vim's perspective on selecting text is different from other text editors."
    },
    {
        "title": "21 Define a Visual Selection",
        "description": "Visual mode's three submodes deal with different kinds of text. In this tip, we'll look at ways of enabling each submode, as well as how to switch between them.<br/><code>&#60;C-v&#62;</code>, k<code>&#60;gv&#62;</code>"
    },
    {
        "title": "22 Repeat Line-Wise Visual Commands",
        "description": "When we use the dot command to repeat a change made to a visual selection, it repeats the change on the same range of text. In this tip, we'll make a change to a line-wise selection and then repeat it with dot command."
    },
    {
        "title": "23 Prefer Operators to Visual Commands Where Possible",
        "description": "Visual mode may be more intuitive than Vim's Normal mode of operation, but it has a weakness: it doesn't always play well with the dot command. We can route around this weakness by using Normal mode operators when appropriate."
    },
    {
        "title": "24 Edit Tabular Data with Visual-Block Mode",
        "description": "We can work with rows of text in any editor, but manipulating columns of text requires a more specialized tool. Vim provides this capability in the form of its Visual-Block mode, which we'll use to transform a plain-text table."
    },
    {
        "title": "25 Change Columns of Text",
        "description": "We can use Visual-Block mode to insert text into several lines of text simultaneously."
    },
    {
        "title": "26 Append After a Ragged Visual Block",
        "description": "Visual-Block mode is great for operating on rectangular chunks of code such as lines and columns, but it's not confined to rectangular regions of text."
    }
]
